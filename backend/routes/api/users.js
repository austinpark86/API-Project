const express = require('express');
const bcrypt = require('bcryptjs');

const { setTokenCookie, requireAuth } = require('../../utils/auth');
const { User } = require('../../db/models');

const router = express.Router();

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');



const validateSignup = [
    check('email')
        .exists({ checkFalsy: true })
        .isEmail()
        .withMessage('Please provide a valid email.'),
    check('username')
        .exists({ checkFalsy: true })
        .isLength({ min: 4 })
        .withMessage('Please provide a username with at least 4 characters.'),
    check('username')
        .not()
        .isEmail()
        .withMessage('Username cannot be an email.'),
    check('password')
        .exists({ checkFalsy: true })
        .isLength({ min: 6 })
        .withMessage('Password must be 6 characters or more.'),
    check('firstname')
        .exists({ checkFalsy: true })
        .withMessage("Please provide a valid first name."),
    check('lastname')
        .exists({ checkFalsy: true })
        .withMessage("Please provide a valid last name."),
    handleValidationErrors
];

router.post(
    '/',
    validateSignup,
    async (req, res) => {
        const { email, password, username, firstName, lastName } = req.body;
        const hashedPassword = bcrypt.hashSync(password);
        const existingUsername = await User.findOne({
            where: {
                username: username,
            },
        });
        //need all fields error body validation
        if (!email || !password || !username || !firstName || !lastName) {
            return res.status(400).json({
                "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
                "errors": {
                    email: "Invalid email",
                    username: "Username is required",
                    firstName: "First Name is required",
                    lastName: "Last Name is required"
                },
            })
        }
        //existing username error
        if (existingUsername) {
            return res.satus(500).json({
                "message": "User already exists",
                "errors": {
                    email: "User with that email already exists"
                }
            })
        }
        //find email
        const existingEmail = await User.findOne({
            where: {
                email: email,
            },
        });
        //existing email error
        if (existingEmail) {
            return res.status(500).json({
                "message": "User already exists",
                "errors": {
                    "username": "User with that username already exists"
                }
            })
        }
        //create user
            const user = await User.create({ email, username, hashedPassword, firstName, lastName });

            const safeUser = {
                id: user.id,
                email: user.email,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName
            };

            await setTokenCookie(res, safeUser);

            return res.json({
                user: safeUser
            });
        }
);

module.exports = router;
